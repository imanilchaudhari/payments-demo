var C2I = (function() {
    var C2I = {};
    var blockOptions = {
        message: null,
        overlayCSS: {
            backgroundColor: "#fff"
        }
    };
    var cachedElements = {};
    var entityMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': '&quot;',
        "'": '&#39;',
        "/": '&#x2F;',
        "?": "&#63;"
    };

    function init() {
        cacheElements();
        bindEvents();
    };

    function cacheElements() {
        C2I.$blockElements = jQuery("[data-block]");
        C2I.cacheElements("topbar", jQuery("#topbar"));
        C2I.cacheElements("window", jQuery(window));
        C2I.cacheElements("navtabs", jQuery(".nav.tabs a"));
        this.$form = jQuery("form");
    };

    function bindEvents() {
        for (let i = 0; i < C2I.$blockElements.length; i++) {
            jQuery(C2I.$blockElements[i]).on("click", blockElement);
        }
        C2I.bindEvents("window", "scroll", hideTopBar);
        C2I.bindEvents("navtabs", "click", stopPropagation);
        C2I.bindEvents("navtabs", "shown.bs.tab", toggleTab);
    };

    function stopPropagation(e) {
        e.preventDefault();
        //e.stopPropagation();
    }

    function toggleTab(e) {
        if(history.pushState) {
            history.pushState(null, null, e.target.hash);
        } else {
            window.location.hash = e.target.hash; //Polyfill for old browsers
        }
    }

    function blockElement() {
        jQuery(jQuery(this).data("block")).block(blockOptions);
    };

    function hideTopBar() {
        if (jQuery(window).scrollTop() > 100) {
            jQuery("#topbar").addClass("sticky");
        }
        else {
            jQuery("#topbar").removeClass("sticky");
        }
    }

    C2I.cacheElements = function(key, elements) {
        cachedElements[key] = elements;
    };

    C2I.bindEvents = function(elementKey, action, fn) {
        if (cachedElements.hasOwnProperty(elementKey)) {
            for (let i = 0; i < cachedElements[elementKey].length; i++) {
                jQuery(cachedElements[elementKey][i]).on(action, fn);
            }
        }
    };

    /**
     * Helper method to retrieve CSRF token from existing form to be used with AJAX calls.
     * @returns {Array}
     */
    C2I.getCsrf = function() {
        if (jQuery("input[name='_csrf']").length) {
            return ["_csrf", jQuery("input[name='_csrf']").val()];
        }
    };

    /**
     * Sets the CSRF generated by Yii2 to be used in AJAX upload forms.
     * @param {array} object Where first array element is the CSRF param and second is  the value
     * @returns {undefined}
     */
    C2I.setCsrf = function(object) {
        C2I.csrf = object;
    };

    /**
     * Converts string to URLencoded
     * @param {string} raw The input HTML
     * @returns {String}
     */
    C2I.escapeHTML = function(raw) {
        return String(raw).replace(/[&<>"'\/]/g, function (s) {
            return entityMap[s];
        });
    };

    /**
     * Finds the duplicate element ids
     * @return {console}
     */
    C2I.duplicateIDS = function () {
        var ids = {};
        var all = document.all || document.getElementsByTagName("*");
        for (var i = 0, l = all.length; i < l; i++) {
            var id = all[i].id;
            if (id) {
                if (ids[id]) {
                    console.log("Duplicate id: #" + id);
                } else {
                    ids[id] = 1;
                }
            }
        }
    };

    /**
     * Removes the  extra parameters from the url
     * @param {string} url from where we have to remove
     * @param {string} parameter what param is to remove
     * @return {string}
     */
    C2I.removeUrlParameter = function(url, parameter) {
        var fragment = url.split('#');
        var urlparts= fragment[0].split('?');

        if (urlparts.length >= 2) {
            var urlBase = urlparts.shift(); //get first part, and remove from array
            var queryString=urlparts.join("?"); //join it back up

            var prefix = encodeURIComponent(parameter)+'=';
            var pars = queryString.split(/[&;]/g);
            for (var i= pars.length; i-->0;) {               //reverse iteration as may be destructive
                if (pars[i].lastIndexOf(prefix, 0) !== -1) {   //idiom for string.startsWith
                    pars.splice(i, 1);
                }
            }
            url = urlBase + (pars.length > 0 ? '?' + pars.join('&') : '');
            if (fragment[1]) {
                url += "#" + fragment[1];
            }
        }
        return url;
    }

    init();

    return C2I;
})();
